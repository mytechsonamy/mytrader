version: '3.8'

services:
  # Main API service
  mytrader-api:
    image: mytrader/api:latest
    container_name: mytrader-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      # Database
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - ConnectionStrings__Redis=${REDIS_CONNECTION_STRING}
      # JWT Configuration
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwt__SecretKey=${JWT_SECRET_KEY}
      - Jwt__AccessTokenExpiryMinutes=15
      - Jwt__RefreshTokenExpiryDays=7
      - Jwt__RefreshTokenRotationEnabled=true
      # External APIs
      - BinanceApi__ApiKey=${BINANCE_API_KEY}
      - BinanceApi__ApiSecret=${BINANCE_API_SECRET}
      - BinanceApi__BaseUrl=https://api.binance.com
      - YahooFinanceApi__Enabled=true
      # Firebase (Push notifications)
      - Firebase__ServerKey=${FIREBASE_SERVER_KEY}
      - Firebase__SenderId=${FIREBASE_SENDER_ID}
      # Email Service
      - EmailService__Provider=SendGrid
      - EmailService__SendGridApiKey=${SENDGRID_API_KEY}
      - EmailService__FromEmail=${FROM_EMAIL}
      - EmailService__FromName=MyTrader
      # Logging
      - Serilog__SeqServerUrl=${SEQ_SERVER_URL}
      - Serilog__MinimumLevel__Default=Information
      - ApplicationInsights__InstrumentationKey=${APP_INSIGHTS_KEY}
      # Caching
      - Caching__DefaultExpirationMinutes=5
      - Caching__IndicatorCacheMinutes=1
      - Caching__MarketDataCacheMinutes=2
      # Rate Limiting
      - RateLimit__GeneralLimit=1000
      - RateLimit__WindowMinutes=1
      - RateLimit__AuthLimit=10
      - RateLimit__AuthWindowMinutes=1
      # Security
      - Security__RequireHttps=true
      - Security__CorsOrigins=${CORS_ORIGINS}
      - Security__EnableApiKeyAuth=true
      - Security__ApiKeyHeaderName=X-API-Key
      # Health Checks
      - HealthChecks__DatabaseTimeoutSeconds=30
      - HealthChecks__ExternalServicesTimeoutSeconds=10
    ports:
      - "8080:80"
    networks:
      - mytrader-network
    volumes:
      - mytrader-logs:/app/logs
      - mytrader-data:/app/data
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mytrader-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    ports:
      - "5432:5432"
    networks:
      - mytrader-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mytrader-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    networks:
      - mytrader-network
    volumes:
      - redis-data:/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mytrader-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mytrader-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - mytrader-api
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Seq Logging (Optional)
  seq:
    image: datalust/seq:latest
    container_name: mytrader-seq
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINPASSWORDHASH=${SEQ_ADMIN_PASSWORD_HASH}
    ports:
      - "5341:80"
    networks:
      - mytrader-network
    volumes:
      - seq-data:/data
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    profiles:
      - logging

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mytrader-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - mytrader-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    profiles:
      - monitoring

  # Grafana Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mytrader-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    ports:
      - "3000:3000"
    networks:
      - mytrader-network
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    profiles:
      - monitoring

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: mytrader-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    networks:
      - mytrader-network
    volumes:
      - postgres-backups:/backups
      - ./backup-scripts:/scripts:ro
    depends_on:
      - postgres
    command: >
      sh -c "
        echo 'Starting backup service...' &&
        while true; do
          echo 'Creating database backup...' &&
          pg_dump -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql &&
          echo 'Backup completed' &&
          find /backups -name '*.sql' -mtime +7 -delete &&
          echo 'Old backups cleaned up' &&
          sleep 21600
        done
      "
    profiles:
      - backup

networks:
  mytrader-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  mytrader-logs:
    driver: local
  mytrader-data:
    driver: local
  nginx-logs:
    driver: local
  seq-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  postgres-backups:
    driver: local