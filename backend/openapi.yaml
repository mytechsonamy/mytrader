openapi: 3.0.3
info:
  title: MyTrader API
  version: 1.0.0
  description: Trading platform API for portfolio management, market data, and trading strategies
  contact:
    name: MyTrader Support
    email: support@mytrader.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.mytrader.com
    description: Production server

security:
  - BearerAuth: []

paths:
  # Health Check
  /health:
    get:
      tags:
        - System
      summary: Health check endpoint
      description: Returns the health status of the API
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  message:
                    type: string
                    example: MyTrader API is running

  # Authentication Endpoints
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              valid_registration:
                summary: Valid registration
                value:
                  email: user@example.com
                  password: Password123
                  firstName: John
                  lastName: Doe
                  phone: "+1234567890"
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
              examples:
                success:
                  summary: Successful registration
                  value:
                    success: true
                    message: Email adresinize doğrulama kodu gönderildi. Hesabınızı aktifleştirmek için kodu giriniz.
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'

  /api/auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email address
      description: Verify email address with verification code
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'

  /api/auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend verification code
      description: Resend verification code to email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationCodeRequest'
      responses:
        '200':
          description: Verification code resent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return session token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              valid_login:
                summary: Valid login
                value:
                  email: user@example.com
                  password: Password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSessionResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout current session
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Başarıyla çıkış yapıldı.

  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Refresh access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Get authenticated user's profile information
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'

  /api/auth/sessions:
    get:
      tags:
        - Authentication
      summary: Get user sessions
      description: Get all active sessions for authenticated user
      responses:
        '200':
          description: Sessions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'

  /api/auth/logout-all:
    post:
      tags:
        - Authentication
      summary: Logout from all sessions
      description: Logout from all active sessions
      responses:
        '200':
          description: Logged out from all sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tüm oturumlardan çıkış yapıldı.

  /api/auth/logout-session/{sessionId}:
    post:
      tags:
        - Authentication
      summary: Logout specific session
      description: Logout from specific session
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Oturum sonlandırıldı.

  # Password Reset Endpoints
  /api/auth/request-password-reset:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Request password reset code
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset code sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'

  /api/auth/verify-password-reset:
    post:
      tags:
        - Authentication
      summary: Verify password reset code
      description: Verify password reset code
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetVerifyRequest'
      responses:
        '200':
          description: Password reset code verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'

  /api/auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password with new password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetFinalizeRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'

  # Portfolio Management
  /api/portfolio:
    get:
      tags:
        - Portfolio
      summary: Get user portfolios
      description: Get all portfolios for authenticated user
      responses:
        '200':
          description: Portfolios retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
    post:
      tags:
        - Portfolio
      summary: Create portfolio
      description: Create a new portfolio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                baseCurrency:
                  type: string
      responses:
        '200':
          description: Portfolio created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'

  /api/portfolio/{portfolioId}:
    get:
      tags:
        - Portfolio
      summary: Get specific portfolio
      description: Get portfolio by ID
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Portfolio retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'

  # Strategy Management
  /api/strategies:
    get:
      tags:
        - Strategies
      summary: Get user strategies
      description: Get all strategies for authenticated user
      responses:
        '200':
          description: Strategies retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Strategy'

  # Symbol Management
  /api/symbols:
    get:
      tags:
        - Symbols
      summary: Get symbols
      description: Get available trading symbols
      responses:
        '200':
          description: Symbols retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Symbol'

  # Market Data
  /api/market-data/{symbolId}/realtime:
    get:
      tags:
        - Market Data
      summary: Get real-time market data
      description: Get real-time market data for symbol
      parameters:
        - name: symbolId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Real-time data retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketData'

  # Gamification
  /api/gamification/leaderboard:
    get:
      tags:
        - Gamification
      summary: Get leaderboard
      description: Get trading competition leaderboard
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [weekly, monthly, all]
            default: weekly
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Leaderboard retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardEntry'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - phone
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 8
          description: User's password (minimum 8 characters, must contain uppercase, lowercase, and number)
        firstName:
          type: string
          minLength: 2
          description: User's first name
        lastName:
          type: string
          minLength: 2
          description: User's last name
        phone:
          type: string
          description: User's phone number

    RegisterResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
        message:
          type: string
          description: Response message

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    UserSessionResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token
        expiresAt:
          type: string
          format: date-time
          description: Token expiration time
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        isEmailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        isEmailVerified:
          type: boolean

    VerifyEmailRequest:
      type: object
      required:
        - email
        - verificationCode
      properties:
        email:
          type: string
          format: email
        verificationCode:
          type: string

    VerificationCodeRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresAt:
          type: string
          format: date-time

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        country:
          type: string

    SessionInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userAgent:
          type: string
        ipAddress:
          type: string
        createdAt:
          type: string
          format: date-time
        lastActivity:
          type: string
          format: date-time
        isCurrentSession:
          type: boolean

    SessionListResponse:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionInfo'

    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    PasswordResetVerifyRequest:
      type: object
      required:
        - email
        - verificationCode
      properties:
        email:
          type: string
          format: email
        verificationCode:
          type: string

    PasswordResetFinalizeRequest:
      type: object
      required:
        - email
        - newPassword
      properties:
        email:
          type: string
          format: email
        newPassword:
          type: string
          minLength: 8

    # Business Domain Schemas
    Portfolio:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        baseCurrency:
          type: string
        totalValue:
          type: number
          format: decimal
        totalPnL:
          type: number
          format: decimal
        totalPnLPercent:
          type: number
          format: decimal
        dailyPnL:
          type: number
          format: decimal
        positions:
          type: array
          items:
            $ref: '#/components/schemas/Position'
        initialCapital:
          type: number
          format: decimal
        cashBalance:
          type: number
          format: decimal
        lastUpdated:
          type: string
          format: date-time

    Position:
      type: object
      properties:
        id:
          type: string
          format: uuid
        symbol:
          type: string
        quantity:
          type: number
          format: decimal
        averagePrice:
          type: number
          format: decimal
        currentPrice:
          type: number
          format: decimal
        marketValue:
          type: number
          format: decimal
        unrealizedPnL:
          type: number
          format: decimal
        unrealizedPnLPercent:
          type: number
          format: decimal

    Strategy:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        symbol:
          type: string
        parameters:
          type: object
          additionalProperties: true

    Symbol:
      type: object
      properties:
        id:
          type: string
        symbol:
          type: string
        displayName:
          type: string
        assetClass:
          type: string
        market:
          type: string
        baseCurrency:
          type: string
        quoteCurrency:
          type: string
        isActive:
          type: boolean

    MarketData:
      type: object
      properties:
        symbolId:
          type: string
        symbol:
          type: string
        price:
          type: number
          format: decimal
        change:
          type: number
          format: decimal
        changePercent:
          type: number
          format: decimal
        volume:
          type: number
          format: decimal
        high24h:
          type: number
          format: decimal
        low24h:
          type: number
          format: decimal
        timestamp:
          type: string
          format: date-time

    LeaderboardEntry:
      type: object
      properties:
        rank:
          type: integer
        userId:
          type: string
          format: uuid
        username:
          type: string
        totalReturn:
          type: number
          format: decimal
        totalReturnPercent:
          type: number
          format: decimal
        numberOfTrades:
          type: integer
        winRate:
          type: number
          format: decimal
        portfolioValue:
          type: number
          format: decimal

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Validation failed
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email: ["Email is required", "Email format is invalid"]
            password: ["Password must be at least 8 characters"]

    # Error Schemas
    ApiError:
      type: object
      properties:
        message:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        status:
          type: integer
          description: HTTP status code
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          description: Request path

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized access

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Forbidden

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Resource not found

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and session management
  - name: Portfolio
    description: Portfolio management operations
  - name: Strategies
    description: Trading strategy management
  - name: Symbols
    description: Trading symbol information
  - name: Market Data
    description: Real-time and historical market data
  - name: Gamification
    description: Trading competition and leaderboard

externalDocs:
  description: MyTrader API Documentation
  url: https://docs.mytrader.com