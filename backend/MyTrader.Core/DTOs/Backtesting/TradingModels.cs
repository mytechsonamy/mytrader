using MyTrader.Core.Models;

namespace MyTrader.Core.DTOs.Backtesting;

/// <summary>
/// Strategy parameters for backtesting
/// </summary>
public class StrategyParameters
{
    public Dictionary<string, object> Parameters { get; set; } = new();

    public T GetParameter<T>(string name, T defaultValue = default(T))
    {
        if (Parameters.TryGetValue(name, out var value))
        {
            try
            {
                return (T)Convert.ChangeType(value, typeof(T));
            }
            catch
            {
                return defaultValue!;
            }
        }
        return defaultValue!;
    }

    public void SetParameter<T>(string name, T value)
    {
        Parameters[name] = value;
    }
}

/// <summary>
/// Risk management parameters
/// </summary>
public class RiskParameters
{
    public decimal MaxRiskPerTrade { get; set; } = 0.02m; // 2%
    public decimal MaxPortfolioRisk { get; set; } = 0.20m; // 20%
    public decimal StopLossPercentage { get; set; } = 0.05m; // 5%
    public decimal TakeProfitPercentage { get; set; } = 0.10m; // 10%
    public int MaxPositions { get; set; } = 5;
    public decimal MaxDrawdown { get; set; } = 0.15m; // 15%
}

/// <summary>
/// Trading signal generated by strategy
/// </summary>
public class TradingSignal
{
    public Guid Id { get; set; } = Guid.NewGuid();
    public string Symbol { get; set; } = string.Empty;
    public SignalType Type { get; set; }
    public decimal Price { get; set; }
    public decimal Quantity { get; set; }
    public DateTime Timestamp { get; set; } = DateTime.UtcNow;
    public decimal? StopLoss { get; set; }
    public decimal? TakeProfit { get; set; }
    public decimal Confidence { get; set; } = 1.0m;
    public string Reason { get; set; } = string.Empty;
    public Dictionary<string, object> Metadata { get; set; } = new();
}

/// <summary>
/// Trade signal type
/// </summary>
public class TradeSignal : TradingSignal
{
    public TradeDirection Direction { get; set; }
    public decimal EntryPrice { get; set; }
    public decimal? ExitPrice { get; set; }
    public TimeInForce TimeInForce { get; set; } = TimeInForce.Day;
}

/// <summary>
/// Portfolio state for risk management
/// </summary>
public class PortfolioState
{
    public decimal TotalValue { get; set; }
    public decimal CashBalance { get; set; }
    public decimal InvestedValue { get; set; }
    public List<Position> Positions { get; set; } = new();
    public decimal UnrealizedPnL { get; set; }
    public decimal RealizedPnL { get; set; }
    public decimal TotalReturn { get; set; }
    public decimal DrawdownFromPeak { get; set; }
    public DateTime LastUpdated { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Risk assessment result
/// </summary>
public class RiskAssessment
{
    public bool IsWithinRiskLimits { get; set; }
    public decimal CurrentRisk { get; set; }
    public decimal MaxAllowableRisk { get; set; }
    public List<string> RiskViolations { get; set; } = new();
    public List<string> Warnings { get; set; } = new();
    public decimal RecommendedPositionSize { get; set; }
}

/// <summary>
/// Trade execution details
/// </summary>
public class TradeExecution
{
    public Guid Id { get; set; } = Guid.NewGuid();
    public string Symbol { get; set; } = string.Empty;
    public TradeDirection Direction { get; set; }
    public decimal EntryPrice { get; set; }
    public decimal? ExitPrice { get; set; }
    public decimal Quantity { get; set; }
    public DateTime EntryTime { get; set; }
    public DateTime? ExitTime { get; set; }
    public decimal? PnL { get; set; }
    public decimal? PnLPercentage { get; set; }
    public TradeStatus Status { get; set; } = TradeStatus.Open;
    public string ExitReason { get; set; } = string.Empty;
    public decimal Commission { get; set; }
}

/// <summary>
/// Performance metrics
/// </summary>
public class PerformanceMetrics
{
    public decimal TotalReturn { get; set; }
    public decimal ReturnPercentage { get; set; }
    public decimal AnnualizedReturn { get; set; }
    public decimal Volatility { get; set; }
    public decimal SharpeRatio { get; set; }
    public decimal SortinoRatio { get; set; }
    public decimal MaxDrawdown { get; set; }
    public decimal MaxDrawdownPercentage { get; set; }
    public int TotalTrades { get; set; }
    public int WinningTrades { get; set; }
    public int LosingTrades { get; set; }
    public decimal WinRate { get; set; }
    public decimal AverageWin { get; set; }
    public decimal AverageLoss { get; set; }
    public decimal ProfitFactor { get; set; }
    public TimeSpan AverageHoldingPeriod { get; set; }
}

/// <summary>
/// Risk-adjusted metrics
/// </summary>
public class RiskAdjustedMetrics
{
    public decimal Beta { get; set; }
    public decimal Alpha { get; set; }
    public decimal TrackingError { get; set; }
    public decimal InformationRatio { get; set; }
    public decimal CalmarRatio { get; set; }
    public decimal SterlingRatio { get; set; }
    public decimal ValueAtRisk95 { get; set; }
    public decimal ConditionalValueAtRisk95 { get; set; }
}

/// <summary>
/// Drawdown analysis
/// </summary>
public class DrawdownAnalysis
{
    public decimal MaxDrawdown { get; set; }
    public decimal MaxDrawdownPercentage { get; set; }
    public DateTime MaxDrawdownStart { get; set; }
    public DateTime MaxDrawdownEnd { get; set; }
    public TimeSpan MaxDrawdownDuration { get; set; }
    public TimeSpan AverageDrawdownDuration { get; set; }
    public List<DrawdownPeriod> DrawdownPeriods { get; set; } = new();
}

/// <summary>
/// Rolling performance metrics
/// </summary>
public class RollingMetrics
{
    public TimeSpan WindowSize { get; set; }
    public List<PerformanceWindow> Windows { get; set; } = new();
    public decimal AverageReturn { get; set; }
    public decimal ReturnStandardDeviation { get; set; }
    public decimal BestWindowReturn { get; set; }
    public decimal WorstWindowReturn { get; set; }
}

/// <summary>
/// Trade analysis details
/// </summary>
public class TradeAnalysis
{
    public TradeExecution Trade { get; set; } = new();
    public decimal EntryScore { get; set; }
    public decimal ExitScore { get; set; }
    public string TradeCategory { get; set; } = string.Empty;
    public List<string> Tags { get; set; } = new();
    public Dictionary<string, decimal> Indicators { get; set; } = new();
}

/// <summary>
/// Performance period for detailed analysis
/// </summary>
public class PerformancePeriod
{
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public decimal Return { get; set; }
    public decimal ReturnPercentage { get; set; }
    public int Trades { get; set; }
    public decimal WinRate { get; set; }
    public decimal MaxDrawdown { get; set; }
}

/// <summary>
/// Comparison metrics between strategies
/// </summary>
public class ComparisonMetrics
{
    public List<StrategyRanking> Rankings { get; set; } = new();
    public Dictionary<string, decimal> MetricComparisons { get; set; } = new();
    public string BestPerformingStrategy { get; set; } = string.Empty;
    public string MostConsistentStrategy { get; set; } = string.Empty;
}

/// <summary>
/// Strategy ranking in comparison
/// </summary>
public class StrategyRanking
{
    public Guid StrategyId { get; set; }
    public string StrategyName { get; set; } = string.Empty;
    public int Rank { get; set; }
    public decimal Score { get; set; }
    public Dictionary<string, decimal> Scores { get; set; } = new();
}

/// <summary>
/// Drawdown period details
/// </summary>
public class DrawdownPeriod
{
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public decimal Peak { get; set; }
    public decimal Trough { get; set; }
    public decimal DrawdownAmount { get; set; }
    public decimal DrawdownPercentage { get; set; }
    public TimeSpan Duration { get; set; }
}

/// <summary>
/// Performance window for rolling metrics
/// </summary>
public class PerformanceWindow
{
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public decimal Return { get; set; }
    public decimal ReturnPercentage { get; set; }
    public decimal SharpeRatio { get; set; }
    public decimal MaxDrawdown { get; set; }
    public int Trades { get; set; }
}

/// <summary>
/// Enums
/// </summary>
public enum SignalType
{
    Buy,
    Sell,
    Hold,
    StopLoss,
    TakeProfit
}

public enum TradeDirection
{
    Long,
    Short
}

public enum TimeInForce
{
    Day,
    GoodTillCanceled,
    ImmediateOrCancel,
    FillOrKill
}

public enum TradeStatus
{
    Open,
    Closed,
    Cancelled,
    PartiallyFilled
}

