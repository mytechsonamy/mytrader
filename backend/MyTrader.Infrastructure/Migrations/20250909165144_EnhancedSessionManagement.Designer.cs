// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyTrader.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyTrader.Infrastructure.Migrations
{
    [DbContext(typeof(TradingDbContext))]
    [Migration("20250909165144_EnhancedSessionManagement")]
    partial class EnhancedSessionManagement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyTrader.Core.Models.BacktestResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AlphaToMarket")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AnnualizedReturn")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("AverageHoldingPeriod")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AverageLoss")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AverageSlippage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AverageWin")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BetaToMarket")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CalmarRatio")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DetailedResults")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EndingCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<decimal>("ExpectedValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FeeImpactPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InformationRatio")
                        .HasColumnType("numeric");

                    b.Property<int>("LosingTrades")
                        .HasColumnType("integer");

                    b.Property<decimal>("LowestCapital")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaxDrawdown")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("MaxDrawdownPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("MaxHoldingPeriod")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinHoldingPeriod")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PeakCapital")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProfitFactor")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SharpeRatio")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("SortinoRatio")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StartingCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StrategyConfig")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("TotalFees")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalReturn")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("TotalReturnPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("integer");

                    b.Property<decimal>("TrackingError")
                        .HasColumnType("numeric");

                    b.Property<int>("TradingDays")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Volatility")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WinRate")
                        .HasColumnType("numeric");

                    b.Property<int>("WinningTrades")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.HasIndex("UserId");

                    b.ToTable("backtest_results", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.EmailVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("email_verifications", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.IndicatorConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AtrLength")
                        .HasColumnType("integer");

                    b.Property<decimal>("AtrStopMultiplier")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("AtrTrailMultiplier")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int>("BollingerPeriod")
                        .HasColumnType("integer");

                    b.Property<decimal>("BollingerStdDev")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("BollingerTouchTolerance")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CustomIndicators")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("EmaTrendLength")
                        .HasColumnType("integer");

                    b.Property<string>("EmaTrendMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FeePercentage")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("MacdFast")
                        .HasColumnType("integer");

                    b.Property<int>("MacdSignal")
                        .HasColumnType("integer");

                    b.Property<int>("MacdSlow")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxPositionSize")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("RsiBuyMax")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int>("RsiPeriod")
                        .HasColumnType("integer");

                    b.Property<decimal>("RsiSellMin")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("SlippagePercentage")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<decimal>("StopLossPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("TakeProfitPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseAtr")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseEmaTrend")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseMacdFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseRsiFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseVolumeFilter")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("VolumeLookbackPeriod")
                        .HasColumnType("integer");

                    b.Property<decimal>("VolumeMultiplier")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("indicator_configs", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.IndicatorValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Atr")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AtrPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BbLower")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BbMiddle")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BbPosition")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BbUpper")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Cci")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CustomIndicators")
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("Ema100")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ema200")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ema21")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ema50")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ema9")
                        .HasColumnType("numeric");

                    b.Property<decimal>("High")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Low")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("Macd")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MacdHistogram")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MacdSignal")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Mfi")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Open")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("RelativeVolume")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Resistance1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Resistance2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Rsi")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RsiSma")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sma100")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sma20")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sma200")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sma50")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("StochD")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("StochK")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Support1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Support2")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrendDirection")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TrendStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Volatility")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Volume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VolumeAvg20")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VolumeRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Vwap")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("WilliamsR")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Symbol", "Timeframe", "Timestamp")
                        .IsUnique();

                    b.ToTable("indicator_values", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.MarketData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("High")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Low")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Open")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Volume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("Symbol", "Timeframe", "Timestamp")
                        .IsUnique();

                    b.ToTable("market_data", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.PasswordReset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("password_resets", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.Signal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalIndicators")
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("BollingerBandLower")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("BollingerBandUpper")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("BollingerPosition")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("Macd")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("Rsi")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<string>("SignalType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.ToTable("signals", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.Strategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EntryRules")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ExitRules")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("IndicatorConfigId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("InitialCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastBacktestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxPositionSize")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("StrategyType")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal?>("TotalReturn")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int?>("TotalTrades")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("WinRate")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorConfigId");

                    b.HasIndex("UserId");

                    b.ToTable("strategies", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.TempRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("temp_registrations", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.TradeHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BacktestResultsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal?>("EntryBollingerPosition")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EntryFee")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EntryMacd")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EntryPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("EntryRsi")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EntryValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("ExitBollingerPosition")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ExitFee")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ExitMacd")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ExitPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("ExitRsi")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ExitValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<TimeSpan?>("HoldingPeriod")
                        .HasColumnType("interval");

                    b.Property<decimal?>("MaxLoss")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxLossPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxProfit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxProfitPercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("RealizedPnl")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("RealizedPnlPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("StopLossPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("TakeProfitPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("TradeContext")
                        .HasColumnType("jsonb");

                    b.Property<int>("TradeSource")
                        .HasColumnType("integer");

                    b.Property<int>("TradeType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("UnrealizedPnl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("UnrealizedPnlPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("WasStopLossHit")
                        .HasColumnType("boolean");

                    b.Property<bool?>("WasTakeProfitHit")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BacktestResultsId");

                    b.HasIndex("StrategyId");

                    b.HasIndex("UserId");

                    b.ToTable("trade_history", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("DefaultInitialCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("DefaultRiskPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("PlanExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("TelegramId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshTokenHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RotatedFrom")
                        .HasColumnType("uuid");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TokenFamilyId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SessionToken")
                        .IsUnique();

                    b.HasIndex("TokenFamilyId")
                        .HasDatabaseName("ix_sessions_family");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_active")
                        .HasFilter("revoked_at IS NULL AND expires_at > NOW()");

                    b.HasIndex("UserId", "JwtId")
                        .IsUnique()
                        .HasDatabaseName("ux_sessions_user_jwt");

                    b.ToTable("user_sessions", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.BacktestResults", b =>
                {
                    b.HasOne("MyTrader.Core.Models.Strategy", "Strategy")
                        .WithMany("BacktestResults")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("BacktestResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.IndicatorConfig", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("IndicatorConfigs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.PasswordReset", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Signal", b =>
                {
                    b.HasOne("MyTrader.Core.Models.Strategy", "Strategy")
                        .WithMany("Signals")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Strategy", b =>
                {
                    b.HasOne("MyTrader.Core.Models.IndicatorConfig", "IndicatorConfig")
                        .WithMany("Strategies")
                        .HasForeignKey("IndicatorConfigId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("Strategies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndicatorConfig");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.TradeHistory", b =>
                {
                    b.HasOne("MyTrader.Core.Models.BacktestResults", "BacktestResults")
                        .WithMany("TradeHistory")
                        .HasForeignKey("BacktestResultsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyTrader.Core.Models.Strategy", "Strategy")
                        .WithMany("TradeHistory")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("TradeHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BacktestResults");

                    b.Navigation("Strategy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserSession", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.BacktestResults", b =>
                {
                    b.Navigation("TradeHistory");
                });

            modelBuilder.Entity("MyTrader.Core.Models.IndicatorConfig", b =>
                {
                    b.Navigation("Strategies");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Strategy", b =>
                {
                    b.Navigation("BacktestResults");

                    b.Navigation("Signals");

                    b.Navigation("TradeHistory");
                });

            modelBuilder.Entity("MyTrader.Core.Models.User", b =>
                {
                    b.Navigation("BacktestResults");

                    b.Navigation("IndicatorConfigs");

                    b.Navigation("PasswordResets");

                    b.Navigation("Sessions");

                    b.Navigation("Strategies");

                    b.Navigation("TradeHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
