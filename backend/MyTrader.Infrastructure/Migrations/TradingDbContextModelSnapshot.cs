// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyTrader.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyTrader.Infrastructure.Migrations
{
    [DbContext(typeof(TradingDbContext))]
    partial class TradingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyTrader.Core.Models.AssetClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("Configuration")
                        .HasColumnType("jsonb")
                        .HasColumnName("configuration");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DefaultPricePrecision")
                        .HasColumnType("integer")
                        .HasColumnName("default_price_precision");

                    b.Property<int>("DefaultQuantityPrecision")
                        .HasColumnType("integer")
                        .HasColumnName("default_quantity_precision");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal?>("MinTradeAmount")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("min_trade_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NameTurkish")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_tr");

                    b.Property<string>("PrimaryCurrency")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("primary_currency");

                    b.Property<string>("RegulatoryClass")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("regulatory_class");

                    b.Property<bool>("Supports24x7Trading")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_24_7_trading");

                    b.Property<bool>("SupportsFractional")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_fractional");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive", "DisplayOrder");

                    b.ToTable("asset_classes", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.BacktestConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StrategyParameters")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BacktestConfiguration");
                });

            modelBuilder.Entity("MyTrader.Core.Models.BacktestQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("ActualDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<TimeSpan?>("EstimatedDuration")
                        .HasColumnType("interval");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Parameters")
                        .HasColumnType("jsonb");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Queued");

                    b.Property<Guid>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("ResultId");

                    b.HasIndex("StrategyId");

                    b.HasIndex("SymbolId");

                    b.HasIndex("UserId", "Status");

                    b.HasIndex("Status", "Priority", "CreatedAt");

                    b.ToTable("backtest_queue", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.BacktestResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AnnualizedReturn")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<Guid?>("BacktestResultsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DetailedResults")
                        .HasColumnType("jsonb");

                    b.Property<decimal>("EndingCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<int>("LosingTrades")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxDrawdown")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("MaxDrawdownPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("SharpeRatio")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("StartingCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("StrategyConfig")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("TotalReturn")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("TotalReturnPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("WinRate")
                        .HasColumnType("numeric");

                    b.Property<int>("WinningTrades")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BacktestResultsId");

                    b.HasIndex("StrategyId");

                    b.HasIndex("SymbolId");

                    b.HasIndex("UserId");

                    b.ToTable("backtest_results", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.Candle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("High")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Low")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Open")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Timestamp");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("Volume")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)");

                    b.Property<decimal?>("Vwap")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OpenTime")
                        .HasDatabaseName("brin_candles_ts");

                    b.HasIndex("SymbolId", "Timeframe", "OpenTime")
                        .IsUnique()
                        .HasDatabaseName("ux_candles_symbol_tf_ts");

                    b.ToTable("candles", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.DataProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("api_key");

                    b.Property<string>("ApiSecret")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("api_secret");

                    b.Property<string>("AuthConfig")
                        .HasColumnType("jsonb")
                        .HasColumnName("auth_config");

                    b.Property<string>("AuthType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("auth_type");

                    b.Property<string>("BackupEndpointUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("backup_endpoint_url");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("ConnectionStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("connection_status");

                    b.Property<decimal?>("CostPer1kCalls")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)")
                        .HasColumnName("cost_per_1k_calls");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DataDelayMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("data_delay_minutes");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("EndpointUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("endpoint_url");

                    b.Property<int>("ErrorCountHourly")
                        .HasColumnType("integer")
                        .HasColumnName("error_count_hourly");

                    b.Property<string>("FeedType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("feed_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<DateTime?>("LastConnectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_connected_at");

                    b.Property<string>("LastError")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("last_error");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer")
                        .HasColumnName("max_retries");

                    b.Property<int?>("MonthlyLimit")
                        .HasColumnType("integer")
                        .HasColumnName("monthly_limit");

                    b.Property<int>("MonthlyUsage")
                        .HasColumnType("integer")
                        .HasColumnName("monthly_usage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("ProviderConfig")
                        .HasColumnType("jsonb")
                        .HasColumnName("provider_config");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("provider_type");

                    b.Property<int?>("RateLimitPerMinute")
                        .HasColumnType("integer")
                        .HasColumnName("rate_limit_per_minute");

                    b.Property<int>("RetryDelayMs")
                        .HasColumnType("integer")
                        .HasColumnName("retry_delay_ms");

                    b.Property<string>("SupportedDataTypes")
                        .HasColumnType("jsonb")
                        .HasColumnName("supported_data_types");

                    b.Property<int>("TimeoutSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("timeout_seconds");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("WebSocketUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("websocket_url");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("MarketId");

                    b.HasIndex("MarketId", "IsActive", "Priority");

                    b.ToTable("data_providers", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.EmailVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("email_verifications", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.HistoricalMarketData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("TradeDate")
                        .HasColumnType("date")
                        .HasColumnName("trade_date");

                    b.Property<decimal?>("AdjustedClosePrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("adjusted_close_price");

                    b.Property<string>("BistCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("bist_code");

                    b.Property<decimal?>("BollingerLower")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("bollinger_lower");

                    b.Property<decimal?>("BollingerUpper")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("bollinger_upper");

                    b.Property<decimal?>("ClosePrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("close_price");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasDefaultValue("USD")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DataCollectedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_collected_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DataFlags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("data_flags");

                    b.Property<int?>("DataQualityScore")
                        .HasColumnType("integer")
                        .HasColumnName("data_quality_score");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("data_source");

                    b.Property<decimal?>("EurTryRate")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("eur_try_rate");

                    b.Property<JsonDocument>("ExtendedData")
                        .HasColumnType("jsonb")
                        .HasColumnName("extended_data");

                    b.Property<decimal?>("FreeFloatMarketCap")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("free_float_market_cap");

                    b.Property<decimal?>("FreeFloatShares")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("free_float_shares");

                    b.Property<decimal?>("HighPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("high_price");

                    b.Property<decimal?>("IndexChangePercent")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("index_change_percent");

                    b.Property<decimal?>("IndexValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("index_value");

                    b.Property<decimal?>("LowPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("low_price");

                    b.Property<decimal?>("MACD")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("macd");

                    b.Property<decimal?>("MACDSignal")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("macd_signal");

                    b.Property<decimal?>("MarketCap")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("market_cap");

                    b.Property<string>("MarketCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("market_code");

                    b.Property<decimal?>("OpenPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("open_price");

                    b.Property<decimal?>("PreviousClose")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("previous_close");

                    b.Property<decimal?>("PriceChange")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("price_change");

                    b.Property<decimal?>("PriceChangePercent")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("price_change_percent");

                    b.Property<decimal?>("RSI")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("rsi");

                    b.Property<decimal?>("SMA20")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("sma_20");

                    b.Property<decimal?>("SMA200")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("sma_200");

                    b.Property<decimal?>("SMA50")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("sma_50");

                    b.Property<decimal?>("SharesOutstanding")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("shares_outstanding");

                    b.Property<JsonDocument>("SourceMetadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("source_metadata");

                    b.Property<int>("SourcePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10)
                        .HasColumnName("source_priority");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid")
                        .HasColumnName("symbol_id");

                    b.Property<string>("SymbolTicker")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("symbol_ticker");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("DAILY")
                        .HasColumnName("timeframe");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<decimal?>("TradingValue")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("trading_value");

                    b.Property<long?>("TransactionCount")
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_count");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("UsdTryRate")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("usd_try_rate");

                    b.Property<decimal?>("VWAP")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("vwap");

                    b.Property<decimal?>("Volume")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("volume");

                    b.HasKey("Id", "TradeDate");

                    b.HasIndex("BistCode", "TradeDate")
                        .HasDatabaseName("idx_historical_market_data_bist")
                        .HasFilter("bist_code IS NOT NULL");

                    b.HasIndex("SymbolTicker", "Timestamp")
                        .IsDescending(false, true)
                        .HasDatabaseName("idx_historical_market_data_intraday")
                        .HasFilter("timestamp IS NOT NULL");

                    b.HasIndex("TradeDate", "Volume")
                        .IsDescending()
                        .HasDatabaseName("idx_historical_market_data_volume")
                        .HasFilter("volume IS NOT NULL");

                    b.HasIndex("SymbolId", "TradeDate", "Timeframe")
                        .HasDatabaseName("idx_historical_market_data_symbol_date");

                    b.HasIndex("SymbolTicker", "Timeframe", "TradeDate")
                        .IsUnique()
                        .HasDatabaseName("idx_historical_market_data_primary");

                    b.HasIndex("TradeDate", "DataSource", "SourcePriority")
                        .HasDatabaseName("idx_historical_market_data_date_source");

                    b.HasIndex("TradeDate", "RSI", "MACD")
                        .HasDatabaseName("idx_historical_market_data_technical")
                        .HasFilter("rsi IS NOT NULL OR macd IS NOT NULL");

                    b.HasIndex("SymbolTicker", "TradeDate", "Timeframe", "DataSource", "SourcePriority")
                        .HasDatabaseName("idx_historical_market_data_dedup");

                    b.ToTable("historical_market_data", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.IndicatorConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AtrLength")
                        .HasColumnType("integer");

                    b.Property<decimal>("AtrStopMultiplier")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("AtrTrailMultiplier")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int>("BollingerPeriod")
                        .HasColumnType("integer");

                    b.Property<decimal>("BollingerStdDev")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("BollingerTouchTolerance")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CustomIndicators")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("EmaTrendLength")
                        .HasColumnType("integer");

                    b.Property<string>("EmaTrendMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FeePercentage")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("MacdFast")
                        .HasColumnType("integer");

                    b.Property<int>("MacdSignal")
                        .HasColumnType("integer");

                    b.Property<int>("MacdSlow")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxPositionSize")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("RsiBuyMax")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int>("RsiPeriod")
                        .HasColumnType("integer");

                    b.Property<decimal>("RsiSellMin")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("SlippagePercentage")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<decimal>("StopLossPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<decimal>("TakeProfitPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseAtr")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseEmaTrend")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseMacdFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseRsiFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseVolumeFilter")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("VolumeLookbackPeriod")
                        .HasColumnType("integer");

                    b.Property<decimal>("VolumeMultiplier")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("indicator_configs", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.IndicatorValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Atr")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AtrPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BbLower")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BbMiddle")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BbPosition")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BbUpper")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Cci")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CustomIndicators")
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("Ema100")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ema200")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ema21")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ema50")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ema9")
                        .HasColumnType("numeric");

                    b.Property<decimal>("High")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Low")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("Macd")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MacdHistogram")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MacdSignal")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Mfi")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Open")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("RelativeVolume")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Resistance1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Resistance2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Rsi")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RsiSma")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sma100")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sma20")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sma200")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sma50")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("StochD")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("StochK")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Support1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Support2")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrendDirection")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TrendStrength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Volatility")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Volume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VolumeAvg20")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VolumeRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Vwap")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("WilliamsR")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId", "Timeframe", "Timestamp")
                        .IsUnique();

                    b.ToTable("indicator_values", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiBaseUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("api_base_url");

                    b.Property<Guid>("AssetClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DataDelayMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("data_delay_minutes");

                    b.Property<decimal?>("DefaultCommissionRate")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)")
                        .HasColumnName("default_commission_rate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("HasRealtimeData")
                        .HasColumnType("boolean")
                        .HasColumnName("has_realtime_data");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("MarketConfig")
                        .HasColumnType("jsonb")
                        .HasColumnName("market_config");

                    b.Property<string>("MarketMaker")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("market_maker");

                    b.Property<decimal?>("MinCommission")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("min_commission");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("NameTurkish")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name_tr");

                    b.Property<string>("PrimaryCurrency")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("primary_currency");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("StatusUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_updated_at");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("timezone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("WebSocketUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("websocket_url");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive", "DisplayOrder");

                    b.ToTable("markets", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.MarketData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssetClass")
                        .HasColumnType("text");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("High")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Low")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Open")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Volume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("Symbol", "Timeframe", "Timestamp")
                        .IsUnique();

                    b.ToTable("market_data", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.MarketDataSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("PeriodStart")
                        .HasColumnType("date")
                        .HasColumnName("period_start");

                    b.Property<decimal?>("AnnualizedVolatility")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)")
                        .HasColumnName("annualized_volatility");

                    b.Property<decimal?>("AvgDailyReturnPercent")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("avg_daily_return_percent");

                    b.Property<decimal?>("AvgDailyTradingValue")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("avg_daily_trading_value");

                    b.Property<long?>("AvgDailyTransactions")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_daily_transactions");

                    b.Property<decimal?>("AvgDailyVolume")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("avg_daily_volume");

                    b.Property<decimal?>("AvgMACD")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("avg_macd");

                    b.Property<decimal?>("AvgRSI")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("avg_rsi");

                    b.Property<decimal?>("Beta")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("beta");

                    b.Property<DateTime>("CalculatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("calculated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("DaysAboveSMA20Percent")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("days_above_sma20_percent");

                    b.Property<decimal?>("DaysAboveSMA50Percent")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("days_above_sma50_percent");

                    b.Property<decimal?>("MarketCorrelation")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)")
                        .HasColumnName("market_correlation");

                    b.Property<decimal?>("MaxDrawdownPercent")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("max_drawdown_percent");

                    b.Property<int?>("PerformancePercentile")
                        .HasColumnType("integer")
                        .HasColumnName("performance_percentile");

                    b.Property<decimal?>("PeriodClose")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("period_close");

                    b.Property<DateOnly>("PeriodEnd")
                        .HasColumnType("date")
                        .HasColumnName("period_end");

                    b.Property<decimal?>("PeriodHigh")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("period_high");

                    b.Property<decimal?>("PeriodLow")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("period_low");

                    b.Property<decimal?>("PeriodOpen")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("period_open");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("period_type");

                    b.Property<decimal?>("PeriodVWAP")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("period_vwap");

                    b.Property<int>("QualityScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100)
                        .HasColumnName("quality_score");

                    b.Property<decimal?>("ResistanceLevel")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("resistance_level");

                    b.Property<decimal?>("SharpeRatio")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("sharpe_ratio");

                    b.Property<decimal?>("SupportLevel")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("support_level");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid")
                        .HasColumnName("symbol_id");

                    b.Property<string>("SymbolTicker")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("symbol_ticker");

                    b.Property<decimal?>("TotalReturnPercent")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("total_return_percent");

                    b.Property<decimal?>("TotalTradingValue")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("total_trading_value");

                    b.Property<long?>("TotalTransactions")
                        .HasColumnType("bigint")
                        .HasColumnName("total_transactions");

                    b.Property<decimal?>("TotalVolume")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("total_volume");

                    b.Property<int>("TradingDays")
                        .HasColumnType("integer")
                        .HasColumnName("trading_days");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("Volatility")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)")
                        .HasColumnName("volatility");

                    b.Property<int?>("VolumePercentile")
                        .HasColumnType("integer")
                        .HasColumnName("volume_percentile");

                    b.Property<decimal?>("VsMarketPercent")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("vs_market_percent");

                    b.Property<decimal?>("Week52High")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("week_52_high");

                    b.Property<decimal?>("Week52Low")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("week_52_low");

                    b.HasKey("Id", "PeriodStart");

                    b.HasIndex("SymbolId");

                    b.HasIndex("PeriodType", "PeriodStart", "AvgDailyVolume")
                        .IsDescending(false, true, true)
                        .HasDatabaseName("idx_market_data_summaries_volume");

                    b.HasIndex("PeriodType", "PeriodStart", "TotalReturnPercent")
                        .IsDescending(false, true, true)
                        .HasDatabaseName("idx_market_data_summaries_performance");

                    b.HasIndex("PeriodType", "QualityScore", "PeriodStart")
                        .IsDescending(false, true, true)
                        .HasDatabaseName("idx_market_data_summaries_quality")
                        .HasFilter("quality_score >= 80");

                    b.HasIndex("SymbolTicker", "PeriodType", "PeriodStart")
                        .IsUnique()
                        .IsDescending(false, false, true)
                        .HasDatabaseName("idx_market_data_summaries_primary");

                    b.ToTable("market_data_summaries", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.NotificationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SourceEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceEntityType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("notification_history");
                });

            modelBuilder.Entity("MyTrader.Core.Models.PasswordReset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("password_resets", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.PortfolioPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AveragePrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("average_price");

                    b.Property<decimal>("CostBasis")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("cost_basis");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("current_price");

                    b.Property<DateTime?>("FirstPurchasedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_purchased_at");

                    b.Property<DateTime?>("LastTradedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_traded_at");

                    b.Property<decimal>("MarketValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("market_value");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uuid")
                        .HasColumnName("portfolio_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("RealizedPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("realized_pnl");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid")
                        .HasColumnName("symbol_id");

                    b.Property<decimal>("UnrealizedPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("unrealized_pnl");

                    b.Property<decimal>("UnrealizedPnLPercent")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("unrealized_pnl_percent");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("SymbolId");

                    b.HasIndex("PortfolioId", "SymbolId")
                        .IsUnique();

                    b.ToTable("portfolio_positions", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.PriceAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("alert_type");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsTriggered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_triggered");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<decimal?>("PercentageChange")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("percentage_change");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("symbol");

                    b.Property<decimal>("TargetPrice")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("target_price");

                    b.Property<DateTimeOffset?>("TriggeredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("triggered_at");

                    b.Property<decimal?>("TriggeredPrice")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("triggered_price");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("price_alerts");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Signal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalIndicators")
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("BollingerBandLower")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("BollingerBandUpper")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("BollingerPosition")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("Macd")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("Rsi")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<string>("SignalType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.HasIndex("SymbolId");

                    b.ToTable("signals", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.Strategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EntryRules")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ExitRules")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("IndicatorConfigId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("InitialCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastBacktestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxPositionSize")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("PerformanceScore")
                        .HasColumnType("numeric");

                    b.Property<int>("StrategyType")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal?>("TotalReturn")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int?>("TotalTrades")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("WinRate")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorConfigId");

                    b.HasIndex("UserId");

                    b.ToTable("strategies", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.StrategyPerformance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<decimal>("MaxDrawdown")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("max_drawdown");

                    b.Property<int>("ProfitableTrades")
                        .HasColumnType("integer")
                        .HasColumnName("profitable_trades");

                    b.Property<decimal>("SharpeRatio")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("sharpe_ratio");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("StrategyId")
                        .HasColumnType("uuid")
                        .HasColumnName("strategy_id");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("symbol");

                    b.Property<decimal>("TotalReturn")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("total_return");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("integer")
                        .HasColumnName("total_trades");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<decimal>("WinRate")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("win_rate");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.HasIndex("UserId");

                    b.ToTable("strategy_performance");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Symbol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssetClass")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("asset_class");

                    b.Property<Guid?>("AssetClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_class_id");

                    b.Property<string>("BaseCurrency")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("base_currency");

                    b.Property<string>("Country")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("CurrentPrice")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("current_price");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Display")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("display");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<string>("FullNameTurkish")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name_tr");

                    b.Property<string>("ISIN")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isin");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("industry");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("boolean")
                        .HasColumnName("is_popular");

                    b.Property<bool>("IsTracked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_tracked");

                    b.Property<decimal?>("MarketCap")
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("market_cap");

                    b.Property<Guid?>("MarketId")
                        .HasColumnType("uuid")
                        .HasColumnName("market_id");

                    b.Property<decimal?>("MaxOrderValue")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("max_order_value");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<decimal?>("MinOrderValue")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("min_order_value");

                    b.Property<decimal?>("PriceChange24h")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("price_change_24h");

                    b.Property<int?>("PricePrecision")
                        .HasColumnType("integer")
                        .HasColumnName("price_precision");

                    b.Property<DateTime?>("PriceUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("price_updated_at");

                    b.Property<int?>("QuantityPrecision")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_precision");

                    b.Property<string>("QuoteCurrency")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("quote_currency");

                    b.Property<string>("Sector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sector");

                    b.Property<decimal?>("StepSize")
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("step_size");

                    b.Property<decimal?>("TickSize")
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("tick_size");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ticker");

                    b.Property<string>("TradingConfig")
                        .HasColumnType("jsonb")
                        .HasColumnName("trading_config");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("venue");

                    b.Property<decimal?>("Volume24h")
                        .HasColumnType("decimal(38,18)")
                        .HasColumnName("volume_24h");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("MarketId");

                    b.HasIndex("Volume24h");

                    b.HasIndex("Sector", "Industry");

                    b.HasIndex("Ticker", "Venue");

                    b.HasIndex("AssetClass", "IsActive", "IsPopular");

                    b.ToTable("symbols");
                });

            modelBuilder.Entity("MyTrader.Core.Models.TempRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("temp_registrations", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.TradeHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BacktestResultsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal?>("EntryBollingerPosition")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EntryFee")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EntryMacd")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EntryPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("EntryRsi")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EntryValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("ExitBollingerPosition")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ExitFee")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ExitMacd")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ExitPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("ExitRsi")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ExitValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<TimeSpan?>("HoldingPeriod")
                        .HasColumnType("interval");

                    b.Property<decimal?>("MaxLoss")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxLossPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxProfit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxProfitPercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("RealizedPnl")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("RealizedPnlPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("StopLossPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("StrategyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("TakeProfitPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("TradeContext")
                        .HasColumnType("jsonb");

                    b.Property<int>("TradeSource")
                        .HasColumnType("integer");

                    b.Property<int>("TradeType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("UnrealizedPnl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("UnrealizedPnlPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("WasStopLossHit")
                        .HasColumnType("boolean");

                    b.Property<bool?>("WasTakeProfitHit")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BacktestResultsId");

                    b.HasIndex("StrategyId");

                    b.HasIndex("SymbolId");

                    b.HasIndex("UserId");

                    b.ToTable("trade_history", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.TradingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_to");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<bool>("IsTradingEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_trading_enabled");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uuid");

                    b.Property<string>("SessionConfig")
                        .HasColumnType("jsonb")
                        .HasColumnName("session_config");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("session_name");

                    b.Property<string>("SessionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("session_type");

                    b.Property<bool>("SpansMidnight")
                        .HasColumnType("boolean")
                        .HasColumnName("spans_midnight");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("VolumeMultiplier")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("volume_multiplier");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("MarketId", "DayOfWeek", "IsPrimary");

                    b.ToTable("trading_sessions", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("currency");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.Property<string>("ExecutionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("execution_id");

                    b.Property<decimal>("Fee")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("fee");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("order_id");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uuid")
                        .HasColumnName("portfolio_id");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("quantity");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("side");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid")
                        .HasColumnName("symbol_id");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("total_amount");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("transaction_type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ExecutedAt");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("SymbolId");

                    b.HasIndex("PortfolioId", "ExecutedAt");

                    b.HasIndex("PortfolioId", "SymbolId", "ExecutedAt");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("DefaultInitialCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("DefaultRiskPercentage")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("PlanExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("TelegramId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("achievement_name");

                    b.Property<string>("AchievementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("achievement_type");

                    b.Property<string>("Data")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("EarnedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("earned_at");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_achievements");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserDashboardPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomAlias")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("custom_alias");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pinned");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid")
                        .HasColumnName("symbol_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("WidgetConfig")
                        .HasColumnType("jsonb")
                        .HasColumnName("widget_config");

                    b.Property<string>("WidgetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("widget_type");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.HasIndex("UserId");

                    b.ToTable("user_dashboard_preferences");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Platform")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevice");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserNotificationPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlertMethods")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("EnableEmailAccountUpdates")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEmailBacktestResults")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEmailMarketing")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEmailSignals")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEmailTradeExecutions")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMarketAlerts")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePortfolioAlerts")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePushAccountUpdates")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePushBacktestResults")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePushMarketing")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePushSignals")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePushTradeExecutions")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSignalAlerts")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSmsAccountUpdates")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSmsBacktestResults")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSmsSignals")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSmsTradeExecutions")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableStrategyAlerts")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTelegramAccountUpdates")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTelegramBacktestResults")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTelegramSignals")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTelegramTradeExecutions")
                        .HasColumnType("boolean");

                    b.Property<string>("FilterByStrategies")
                        .HasColumnType("text");

                    b.Property<string>("FilterBySymbols")
                        .HasColumnType("text");

                    b.Property<decimal>("MinSignalConfidence")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PortfolioChangeThreshold")
                        .HasColumnType("numeric");

                    b.Property<string>("PreferredTradingHours")
                        .HasColumnType("text");

                    b.Property<string>("QuietHoursDays")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("QuietHoursEnabled")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("QuietHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("QuietHoursStart")
                        .HasColumnType("interval");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_notification_preferences", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserPortfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("base_ccy");

                    b.Property<decimal>("CashBalance")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("cash_balance");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("CurrentValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("current_value");

                    b.Property<decimal>("DailyPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("daily_pnl");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<decimal>("InitialCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("initial_capital");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("TotalPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("total_pnl");

                    b.Property<decimal>("TotalReturnPercent")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("total_return_percent");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsDefault");

                    b.ToTable("user_portfolios", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshTokenHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RotatedFrom")
                        .HasColumnType("uuid");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TokenFamilyId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SessionToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("user_sessions", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserStrategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<JsonDocument>("CustomEntryRules")
                        .HasColumnType("jsonb")
                        .HasColumnName("custom_entry_rules");

                    b.Property<JsonDocument>("CustomExitRules")
                        .HasColumnType("jsonb")
                        .HasColumnName("custom_exit_rules");

                    b.Property<JsonDocument>("CustomRiskManagement")
                        .HasColumnType("jsonb")
                        .HasColumnName("custom_risk_management");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<decimal>("InitialCapital")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("initial_capital");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean")
                        .HasColumnName("is_custom");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean")
                        .HasColumnName("is_favorite");

                    b.Property<DateTimeOffset?>("LastBacktestAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_backtest_at");

                    b.Property<JsonDocument>("LastBacktestResults")
                        .HasColumnType("jsonb")
                        .HasColumnName("last_backtest_results");

                    b.Property<decimal>("MaxPositionSizePercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("max_position_size_percent");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("notes");

                    b.Property<JsonDocument>("Parameters")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("parameters");

                    b.Property<JsonDocument>("PerformanceStats")
                        .HasColumnType("jsonb")
                        .HasColumnName("performance_stats");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("tags");

                    b.Property<string>("TargetSymbols")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("target_symbols");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<string>("TemplateVersion")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("template_version");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("timeframe");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("user_strategies", (string)null);
                });

            modelBuilder.Entity("MyTrader.Core.Models.BacktestQueue", b =>
                {
                    b.HasOne("MyTrader.Core.Models.BacktestConfiguration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId");

                    b.HasOne("MyTrader.Core.Models.BacktestResults", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("MyTrader.Core.Models.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Result");

                    b.Navigation("Strategy");

                    b.Navigation("Symbol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.BacktestResults", b =>
                {
                    b.HasOne("MyTrader.Core.Models.BacktestResults", null)
                        .WithMany("Reproductions")
                        .HasForeignKey("BacktestResultsId");

                    b.HasOne("MyTrader.Core.Models.Strategy", "Strategy")
                        .WithMany("BacktestResults")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("BacktestResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");

                    b.Navigation("Symbol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.DataProvider", b =>
                {
                    b.HasOne("MyTrader.Core.Models.Market", "Market")
                        .WithMany("DataProviders")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("MyTrader.Core.Models.HistoricalMarketData", b =>
                {
                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MyTrader.Core.Models.IndicatorConfig", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("IndicatorConfigs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.IndicatorValues", b =>
                {
                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Market", b =>
                {
                    b.HasOne("MyTrader.Core.Models.AssetClass", "AssetClass")
                        .WithMany("Markets")
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetClass");
                });

            modelBuilder.Entity("MyTrader.Core.Models.MarketDataSummary", b =>
                {
                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MyTrader.Core.Models.NotificationHistory", b =>
                {
                    b.HasOne("MyTrader.Core.Models.UserDevice", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.PasswordReset", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.PortfolioPosition", b =>
                {
                    b.HasOne("MyTrader.Core.Models.UserPortfolio", "Portfolio")
                        .WithMany("Positions")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MyTrader.Core.Models.PriceAlert", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Signal", b =>
                {
                    b.HasOne("MyTrader.Core.Models.Strategy", "Strategy")
                        .WithMany("Signals")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Strategy");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Strategy", b =>
                {
                    b.HasOne("MyTrader.Core.Models.IndicatorConfig", "IndicatorConfig")
                        .WithMany("Strategies")
                        .HasForeignKey("IndicatorConfigId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("Strategies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndicatorConfig");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.StrategyPerformance", b =>
                {
                    b.HasOne("MyTrader.Core.Models.UserStrategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Symbol", b =>
                {
                    b.HasOne("MyTrader.Core.Models.AssetClass", "AssetClassEntity")
                        .WithMany("Symbols")
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyTrader.Core.Models.Market", "Market")
                        .WithMany("Symbols")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssetClassEntity");

                    b.Navigation("Market");
                });

            modelBuilder.Entity("MyTrader.Core.Models.TradeHistory", b =>
                {
                    b.HasOne("MyTrader.Core.Models.BacktestResults", "BacktestResults")
                        .WithMany("TradeHistory")
                        .HasForeignKey("BacktestResultsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyTrader.Core.Models.Strategy", "Strategy")
                        .WithMany("TradeHistory")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("TradeHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BacktestResults");

                    b.Navigation("Strategy");

                    b.Navigation("Symbol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.TradingSession", b =>
                {
                    b.HasOne("MyTrader.Core.Models.Market", "Market")
                        .WithMany("TradingSessions")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Transaction", b =>
                {
                    b.HasOne("MyTrader.Core.Models.UserPortfolio", "Portfolio")
                        .WithMany("Transactions")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserAchievement", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserDashboardPreferences", b =>
                {
                    b.HasOne("MyTrader.Core.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("DashboardPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserDevice", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserNotificationPreferences", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserPortfolio", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserSession", b =>
                {
                    b.HasOne("MyTrader.Core.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTrader.Core.Models.AssetClass", b =>
                {
                    b.Navigation("Markets");

                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("MyTrader.Core.Models.BacktestResults", b =>
                {
                    b.Navigation("Reproductions");

                    b.Navigation("TradeHistory");
                });

            modelBuilder.Entity("MyTrader.Core.Models.IndicatorConfig", b =>
                {
                    b.Navigation("Strategies");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Market", b =>
                {
                    b.Navigation("DataProviders");

                    b.Navigation("Symbols");

                    b.Navigation("TradingSessions");
                });

            modelBuilder.Entity("MyTrader.Core.Models.Strategy", b =>
                {
                    b.Navigation("BacktestResults");

                    b.Navigation("Signals");

                    b.Navigation("TradeHistory");
                });

            modelBuilder.Entity("MyTrader.Core.Models.User", b =>
                {
                    b.Navigation("BacktestResults");

                    b.Navigation("DashboardPreferences");

                    b.Navigation("IndicatorConfigs");

                    b.Navigation("PasswordResets");

                    b.Navigation("Sessions");

                    b.Navigation("Strategies");

                    b.Navigation("TradeHistory");
                });

            modelBuilder.Entity("MyTrader.Core.Models.UserPortfolio", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
