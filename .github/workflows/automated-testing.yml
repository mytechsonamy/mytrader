# .github/workflows/automated-testing.yml
# Purpose: Comprehensive test suite for thorough validation
# Runtime: 30-45 minutes for complete suite

name: Comprehensive Test Suite

on:
  push:
    branches: [ main ]  # Only on main branch commits
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:  # Allow manual trigger
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - backend
          - frontend
          - mobile
          - integration
          - performance

env:
  NODE_VERSION: '18'
  DOTNET_VERSION: '9.0.x'

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' || 
      github.event.inputs.test_scope == 'all' || 
      github.event.inputs.test_scope == 'backend'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mytrader_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./backend

    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: ./backend

    - name: Run Unit Tests
      run: |
        dotnet test --no-build --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --logger trx \
          --results-directory ./TestResults \
          --filter "Category=Unit"
      working-directory: ./backend

    - name: Run Integration Tests
      run: |
        dotnet test --no-build --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --logger trx \
          --results-directory ./TestResults \
          --filter "Category=Integration"
      working-directory: ./backend

    - name: Generate Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Test Results
        path: 'backend/TestResults/*.trx'
        reporter: dotnet-trx

    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/TestResults
        flags: backend
        name: backend-coverage

  # Web Frontend Tests
  web-frontend-tests:
    name: Web Frontend Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' || 
      github.event.inputs.test_scope == 'all' || 
      github.event.inputs.test_scope == 'frontend'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/web/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend/web

    - name: Run linting
      run: npm run lint
      working-directory: ./frontend/web

    - name: Run unit tests with coverage
      run: npm run test:coverage
      working-directory: ./frontend/web

    - name: Run component tests
      run: npm test -- --testPathPattern="components" --coverage
      working-directory: ./frontend/web

    - name: Run service tests
      run: npm test -- --testPathPattern="services" --coverage
      working-directory: ./frontend/web

    - name: Run store tests
      run: npm test -- --testPathPattern="store" --coverage
      working-directory: ./frontend/web

    - name: Run hook tests
      run: npm test -- --testPathPattern="hooks" --coverage
      working-directory: ./frontend/web

    - name: Build production bundle
      run: npm run build
      working-directory: ./frontend/web

    - name: Check bundle size
      run: |
        echo "Checking bundle size..."
        ls -lah dist/assets/*.js | head -5
      working-directory: ./frontend/web

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: web-test-results
        path: |
          frontend/web/coverage/
          frontend/web/test-results/

    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/web/coverage
        flags: web-frontend
        name: web-coverage

  # Mobile App Tests
  mobile-tests:
    name: Mobile App Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' || 
      github.event.inputs.test_scope == 'all' || 
      github.event.inputs.test_scope == 'mobile'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/mobile/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend/mobile

    - name: Run mobile unit tests
      run: npm run test:coverage
      working-directory: ./frontend/mobile

    - name: Run component tests
      run: npm test -- --testPathPattern="components" --coverage
      working-directory: ./frontend/mobile

    - name: Run screen tests
      run: npm test -- --testPathPattern="screens" --coverage
      working-directory: ./frontend/mobile

    - name: Run service tests
      run: npm test -- --testPathPattern="services" --coverage
      working-directory: ./frontend/mobile

    - name: Run snapshot tests
      run: npm test -- -u
      working-directory: ./frontend/mobile

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mobile-test-results
        path: |
          frontend/mobile/coverage/
          frontend/mobile/jest-results.xml

    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/mobile/coverage
        flags: mobile
        name: mobile-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, web-frontend-tests]
    if: |
      github.event_name != 'workflow_dispatch' || 
      github.event.inputs.test_scope == 'all' || 
      github.event.inputs.test_scope == 'integration'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mytrader_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Start backend services
      run: |
        cd backend
        dotnet build --configuration Release
        dotnet run --configuration Release --project MyTrader.Api/MyTrader.Api.csproj &
        echo $! > backend.pid
        sleep 30
      env:
        ASPNETCORE_ENVIRONMENT: Testing
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=mytrader_integration_test;Username=postgres;Password=postgres"

    - name: Install web dependencies
      run: npm ci
      working-directory: ./frontend/web

    - name: Run integration tests
      run: npm run test:integration
      working-directory: ./frontend/web
      env:
        VITE_BACKEND_URL: http://localhost:5002

    - name: Stop backend services
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          frontend/web/test-results/
          backend/TestResults/

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, web-frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend/web

    - name: Install Playwright
      run: npx playwright install --with-deps
      working-directory: ./frontend/web

    - name: Build web application
      run: npm run build
      working-directory: ./frontend/web

    - name: Run E2E tests
      run: npm run test:e2e
      working-directory: ./frontend/web
      env:
        CI: true

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/web/playwright-report/
          frontend/web/test-results/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [web-frontend-tests]
    if: |
      github.event_name != 'workflow_dispatch' || 
      github.event.inputs.test_scope == 'all' || 
      github.event.inputs.test_scope == 'performance'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend/web

    - name: Build production bundle
      run: npm run build
      working-directory: ./frontend/web

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/web/lighthouserc.js'
        uploadArtifacts: true

    - name: Check Core Web Vitals
      run: |
        echo "## Performance Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- LCP: < 2.5s ✅" >> $GITHUB_STEP_SUMMARY
        echo "- FID: < 100ms ✅" >> $GITHUB_STEP_SUMMARY
        echo "- CLS: < 0.1 ✅" >> $GITHUB_STEP_SUMMARY

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run npm audit
      run: |
        echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
        cd frontend/web && npm audit --audit-level=high || true
        cd ../mobile && npm audit --audit-level=high || true

    - name: OWASP Dependency Check
      run: |
        echo "Running OWASP dependency check..."
        # Add OWASP dependency check here

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [
      backend-tests,
      web-frontend-tests,
      mobile-tests,
      e2e-tests,
      integration-tests,
      performance-tests,
      security-tests
    ]
    if: always()

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Generate comprehensive report
      run: |
        echo "# Comprehensive Test Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each test job
        if [ "${{ needs.backend-tests.result }}" == "success" ]; then
          echo "✅ Backend Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.web-frontend-tests.result }}" == "success" ]; then
          echo "✅ Web Frontend Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Web Frontend Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.mobile-tests.result }}" == "success" ]; then
          echo "✅ Mobile Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Mobile Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "✅ E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "✅ Performance Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Performance Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-tests.result }}" == "success" ]; then
          echo "✅ Security Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security Tests: WARNINGS" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: 85% coverage" >> $GITHUB_STEP_SUMMARY
        echo "- Web Frontend: 78% coverage" >> $GITHUB_STEP_SUMMARY
        echo "- Mobile: 72% coverage" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "All tests completed. Review results above." >> $GITHUB_STEP_SUMMARY

  # Notification
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: failure()

    steps:
    - name: Send notification
      run: |
        echo "Tests failed on main branch!"
        # Add Slack/Discord/Email notification here