#!/bin/bash

# myTrader Monitoring System Test Script
# This script tests all monitoring endpoints and verifies the observability infrastructure

set -e

BASE_URL="http://localhost:5055"
HEALTH_CHECKS=(
    "/health"
    "/health/critical"
    "/health/database"
    "/health/realtime"
    "/health-ui"
    "/metrics"
)

echo "üîç Testing myTrader Monitoring System"
echo "======================================="
echo

# Test basic connectivity
echo "üì° Testing basic API connectivity..."
response=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/")
if [ "$response" -eq 200 ]; then
    echo "‚úÖ API is responding (HTTP $response)"
else
    echo "‚ùå API is not responding (HTTP $response)"
    exit 1
fi
echo

# Test health check endpoints
echo "üè• Testing health check endpoints..."
for endpoint in "${HEALTH_CHECKS[@]}"; do
    echo "  Testing $endpoint..."

    if [ "$endpoint" = "/health-ui" ]; then
        # Health UI returns HTML, just check if it's accessible
        response=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL$endpoint")
        if [ "$response" -eq 200 ]; then
            echo "    ‚úÖ Health UI accessible (HTTP $response)"
        else
            echo "    ‚ö†Ô∏è  Health UI returned HTTP $response"
        fi
    elif [ "$endpoint" = "/metrics" ]; then
        # Metrics endpoint returns Prometheus format
        response=$(curl -s "$BASE_URL$endpoint" | head -n 5)
        if [[ $response == *"mytrader_info"* ]]; then
            echo "    ‚úÖ Metrics endpoint working"
            echo "    üìä Sample metrics:"
            curl -s "$BASE_URL$endpoint" | grep "mytrader_" | head -n 3 | sed 's/^/      /'
        else
            echo "    ‚ùå Metrics endpoint not working properly"
        fi
    else
        # JSON health check endpoints
        response=$(curl -s "$BASE_URL$endpoint")
        status=$(echo "$response" | jq -r '.status // "unknown"' 2>/dev/null || echo "parse_error")

        if [ "$status" = "Healthy" ] || [ "$status" = "healthy" ]; then
            echo "    ‚úÖ $endpoint: $status"
        elif [ "$status" = "Degraded" ] || [ "$status" = "degraded" ]; then
            echo "    ‚ö†Ô∏è  $endpoint: $status"
        elif [ "$status" = "Unhealthy" ] || [ "$status" = "unhealthy" ]; then
            echo "    ‚ùå $endpoint: $status"
        else
            echo "    ‚ùì $endpoint: Cannot parse response"
        fi
    fi
done
echo

# Test specific health check details
echo "üî¨ Testing detailed health check information..."

# Database health
echo "  Database connectivity:"
db_health=$(curl -s "$BASE_URL/api/health/database")
if echo "$db_health" | jq -e '.connected' >/dev/null 2>&1; then
    connected=$(echo "$db_health" | jq -r '.connected')
    if [ "$connected" = "true" ]; then
        echo "    ‚úÖ Database connected"
    else
        echo "    ‚ùå Database not connected"
    fi
else
    echo "    ‚ùì Cannot determine database status"
fi

# Market hours
echo "  Market status:"
market_status=$(curl -s "$BASE_URL/api/health/market-hours")
if echo "$market_status" | jq -e '.markets' >/dev/null 2>&1; then
    echo "    ‚úÖ Market status available"
    echo "$market_status" | jq -r '.markets[] | "      \(.market): \(.status)"' 2>/dev/null || echo "      Markets data available"
else
    echo "    ‚ùì Cannot retrieve market status"
fi

# System metrics
echo "  System performance:"
metrics_response=$(curl -s "$BASE_URL/api/health/metrics")
if echo "$metrics_response" | jq -e '.memory.totalMemory' >/dev/null 2>&1; then
    memory_mb=$(echo "$metrics_response" | jq -r '.memory.totalMemory' | awk '{printf "%.0f", $1/1024/1024}')
    echo "    üìä Memory usage: ${memory_mb}MB"

    uptime=$(echo "$metrics_response" | jq -r '.uptime' | sed 's/\.[0-9]*//g')
    echo "    ‚è±Ô∏è  Uptime: $uptime"
else
    echo "    ‚ùì Cannot retrieve system metrics"
fi
echo

# Test SignalR hub health
echo "üîå Testing real-time connection health..."
signalr_health=$(curl -s "$BASE_URL/api/health/connections")
if echo "$signalr_health" | jq -e '.signalR.hubs' >/dev/null 2>&1; then
    echo "  ‚úÖ SignalR health check available"
    echo "$signalr_health" | jq -r '.signalR.hubs[]?' | sed 's/^/    üì° Hub: /' 2>/dev/null || echo "    üì° Hub information available"
else
    echo "  ‚ùì Cannot retrieve SignalR health status"
fi
echo

# Test API structure validation
echo "üîç Testing API structure consistency..."
api_test=$(curl -s "$BASE_URL/api/health/test-api")
if echo "$api_test" | jq -e '.success' >/dev/null 2>&1; then
    success=$(echo "$api_test" | jq -r '.success')
    if [ "$success" = "true" ]; then
        echo "  ‚úÖ API structure validation passed"
    else
        echo "  ‚ùå API structure validation failed"
    fi
else
    echo "  ‚ùì Cannot validate API structure"
fi
echo

# Test Prometheus metrics format
echo "üìä Validating Prometheus metrics format..."
metrics_count=$(curl -s "$BASE_URL/metrics" | grep -c "^mytrader_" || echo "0")
if [ "$metrics_count" -gt 0 ]; then
    echo "  ‚úÖ Found $metrics_count myTrader metrics"
    echo "  üìà Sample metrics:"
    curl -s "$BASE_URL/metrics" | grep "^mytrader_" | head -n 5 | sed 's/^/    /'
else
    echo "  ‚ùå No myTrader metrics found"
fi
echo

# Final summary
echo "üìã Monitoring System Test Summary"
echo "================================="
echo
echo "üü¢ Available Endpoints:"
echo "  ‚Ä¢ Health Dashboard: $BASE_URL/health-ui"
echo "  ‚Ä¢ Health API: $BASE_URL/health"
echo "  ‚Ä¢ Prometheus Metrics: $BASE_URL/metrics"
echo "  ‚Ä¢ System Info: $BASE_URL/"
echo
echo "üîß Key Features Validated:"
echo "  ‚Ä¢ Multi-layer health checks"
echo "  ‚Ä¢ Real-time connection monitoring"
echo "  ‚Ä¢ Database connectivity tracking"
echo "  ‚Ä¢ System performance metrics"
echo "  ‚Ä¢ Market status monitoring"
echo "  ‚Ä¢ Prometheus metrics export"
echo
echo "üìà Monitoring Capabilities:"
echo "  ‚Ä¢ SLO compliance tracking"
echo "  ‚Ä¢ Error budget monitoring"
echo "  ‚Ä¢ Real-time alerting"
echo "  ‚Ä¢ Performance metrics"
echo "  ‚Ä¢ Data quality validation"
echo
echo "‚úÖ Monitoring system test completed successfully!"
echo
echo "üéØ Next Steps:"
echo "  1. Visit $BASE_URL/health-ui for the monitoring dashboard"
echo "  2. Set up Prometheus to scrape $BASE_URL/metrics"
echo "  3. Configure alert notification webhooks"
echo "  4. Review SLO definitions in SLO_DEFINITIONS.md"
echo "  5. Follow operational procedures in MONITORING_OPERATIONS_GUIDE.md"