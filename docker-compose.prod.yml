version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: mytrader_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mytrader}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d
      - ./backups:/backups  # Backup dizini
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mytrader"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mytrader_network_prod
    restart: unless-stopped
    # Port'u expose etmiyoruz (güvenlik için sadece internal network)

  # Backend API
  mytrader_api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mytrader_api_prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ALLOWED_HOSTS=*
      - Kestrel__Endpoints__Http__Url=http://0.0.0.0:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB:-mytrader};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD}
      - Jwt__Key=${JWT_SECRET_KEY:?JWT_SECRET_KEY is required}
      - Jwt__Secret=${JWT_SECRET_KEY}
      - Alpaca__Streaming__ApiKey=${ALPACA_API_KEY:-placeholder}
      - Alpaca__Streaming__ApiSecret=${ALPACA_API_SECRET:-placeholder}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mytrader_network_prod
    restart: unless-stopped
    # Port'u expose etmiyoruz (nginx üzerinden erişilecek)

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mytrader_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./comingsoon:/usr/share/nginx/html:ro  # Coming soon page
    depends_on:
      - mytrader_api
    networks:
      - mytrader_network_prod
    restart: unless-stopped

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: mytrader_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - mytrader_network_prod

volumes:
  postgres_data_prod:
    driver: local

networks:
  mytrader_network_prod:
    driver: bridge
